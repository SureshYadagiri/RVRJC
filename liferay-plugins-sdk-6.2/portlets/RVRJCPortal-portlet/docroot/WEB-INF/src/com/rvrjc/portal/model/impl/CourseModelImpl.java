/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rvrjc.portal.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rvrjc.portal.model.Course;
import com.rvrjc.portal.model.CourseModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Course service. Represents a row in the &quot;rvrjc_Course&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rvrjc.portal.model.CourseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseImpl}.
 * </p>
 *
 * @author suresh
 * @see CourseImpl
 * @see com.rvrjc.portal.model.Course
 * @see com.rvrjc.portal.model.CourseModel
 * @generated
 */
public class CourseModelImpl extends BaseModelImpl<Course>
	implements CourseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course model instance should use the {@link com.rvrjc.portal.model.Course} interface instead.
	 */
	public static final String TABLE_NAME = "rvrjc_Course";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cno", Types.BIGINT },
			{ "ccode", Types.VARCHAR },
			{ "cname", Types.VARCHAR },
			{ "cfee", Types.INTEGER },
			{ "cdescription", Types.VARCHAR },
			{ "createdOn", Types.TIMESTAMP },
			{ "createdBy", Types.VARCHAR },
			{ "modifiedOn", Types.TIMESTAMP },
			{ "modifiedBy", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table rvrjc_Course (cno LONG not null primary key,ccode VARCHAR(75) null,cname VARCHAR(75) null,cfee INTEGER,cdescription VARCHAR(75) null,createdOn DATE null,createdBy VARCHAR(75) null,modifiedOn DATE null,modifiedBy VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table rvrjc_Course";
	public static final String ORDER_BY_JPQL = " ORDER BY course.cno ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rvrjc_Course.cno ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rvrjc.portal.model.Course"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rvrjc.portal.model.Course"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rvrjc.portal.model.Course"),
			true);
	public static long CFEE_COLUMN_BITMASK = 1L;
	public static long CNAME_COLUMN_BITMASK = 2L;
	public static long CNO_COLUMN_BITMASK = 4L;
	public static final String MAPPING_TABLE_RVRJC_STUDENT_COURSE_NAME = "rvrjc_Student_course";
	public static final Object[][] MAPPING_TABLE_RVRJC_STUDENT_COURSE_COLUMNS = {
			{ "cno", Types.BIGINT },
			{ "sno", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_RVRJC_STUDENT_COURSE_SQL_CREATE = "create table rvrjc_Student_course (cno LONG not null,sno LONG not null,primary key (cno, sno))";
	public static final boolean FINDER_CACHE_ENABLED_RVRJC_STUDENT_COURSE = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.rvrjc_Student_course"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rvrjc.portal.model.Course"));

	public CourseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cno;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCno(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cno;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Course.class;
	}

	@Override
	public String getModelClassName() {
		return Course.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cno", getCno());
		attributes.put("ccode", getCcode());
		attributes.put("cname", getCname());
		attributes.put("cfee", getCfee());
		attributes.put("cdescription", getCdescription());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedOn", getModifiedOn());
		attributes.put("modifiedBy", getModifiedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cno = (Long)attributes.get("cno");

		if (cno != null) {
			setCno(cno);
		}

		String ccode = (String)attributes.get("ccode");

		if (ccode != null) {
			setCcode(ccode);
		}

		String cname = (String)attributes.get("cname");

		if (cname != null) {
			setCname(cname);
		}

		Integer cfee = (Integer)attributes.get("cfee");

		if (cfee != null) {
			setCfee(cfee);
		}

		String cdescription = (String)attributes.get("cdescription");

		if (cdescription != null) {
			setCdescription(cdescription);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date modifiedOn = (Date)attributes.get("modifiedOn");

		if (modifiedOn != null) {
			setModifiedOn(modifiedOn);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@Override
	public long getCno() {
		return _cno;
	}

	@Override
	public void setCno(long cno) {
		_columnBitmask = -1L;

		_cno = cno;
	}

	@Override
	public String getCcode() {
		if (_ccode == null) {
			return StringPool.BLANK;
		}
		else {
			return _ccode;
		}
	}

	@Override
	public void setCcode(String ccode) {
		_ccode = ccode;
	}

	@Override
	public String getCname() {
		if (_cname == null) {
			return StringPool.BLANK;
		}
		else {
			return _cname;
		}
	}

	@Override
	public void setCname(String cname) {
		_columnBitmask |= CNAME_COLUMN_BITMASK;

		if (_originalCname == null) {
			_originalCname = _cname;
		}

		_cname = cname;
	}

	public String getOriginalCname() {
		return GetterUtil.getString(_originalCname);
	}

	@Override
	public int getCfee() {
		return _cfee;
	}

	@Override
	public void setCfee(int cfee) {
		_columnBitmask |= CFEE_COLUMN_BITMASK;

		if (!_setOriginalCfee) {
			_setOriginalCfee = true;

			_originalCfee = _cfee;
		}

		_cfee = cfee;
	}

	public int getOriginalCfee() {
		return _originalCfee;
	}

	@Override
	public String getCdescription() {
		if (_cdescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _cdescription;
		}
	}

	@Override
	public void setCdescription(String cdescription) {
		_cdescription = cdescription;
	}

	@Override
	public Date getCreatedOn() {
		return _createdOn;
	}

	@Override
	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getModifiedOn() {
		return _modifiedOn;
	}

	@Override
	public void setModifiedOn(Date modifiedOn) {
		_modifiedOn = modifiedOn;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Course.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Course toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Course)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CourseImpl courseImpl = new CourseImpl();

		courseImpl.setCno(getCno());
		courseImpl.setCcode(getCcode());
		courseImpl.setCname(getCname());
		courseImpl.setCfee(getCfee());
		courseImpl.setCdescription(getCdescription());
		courseImpl.setCreatedOn(getCreatedOn());
		courseImpl.setCreatedBy(getCreatedBy());
		courseImpl.setModifiedOn(getModifiedOn());
		courseImpl.setModifiedBy(getModifiedBy());

		courseImpl.resetOriginalValues();

		return courseImpl;
	}

	@Override
	public int compareTo(Course course) {
		int value = 0;

		if (getCno() < course.getCno()) {
			value = -1;
		}
		else if (getCno() > course.getCno()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Course)) {
			return false;
		}

		Course course = (Course)obj;

		long primaryKey = course.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CourseModelImpl courseModelImpl = this;

		courseModelImpl._originalCname = courseModelImpl._cname;

		courseModelImpl._originalCfee = courseModelImpl._cfee;

		courseModelImpl._setOriginalCfee = false;

		courseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Course> toCacheModel() {
		CourseCacheModel courseCacheModel = new CourseCacheModel();

		courseCacheModel.cno = getCno();

		courseCacheModel.ccode = getCcode();

		String ccode = courseCacheModel.ccode;

		if ((ccode != null) && (ccode.length() == 0)) {
			courseCacheModel.ccode = null;
		}

		courseCacheModel.cname = getCname();

		String cname = courseCacheModel.cname;

		if ((cname != null) && (cname.length() == 0)) {
			courseCacheModel.cname = null;
		}

		courseCacheModel.cfee = getCfee();

		courseCacheModel.cdescription = getCdescription();

		String cdescription = courseCacheModel.cdescription;

		if ((cdescription != null) && (cdescription.length() == 0)) {
			courseCacheModel.cdescription = null;
		}

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			courseCacheModel.createdOn = createdOn.getTime();
		}
		else {
			courseCacheModel.createdOn = Long.MIN_VALUE;
		}

		courseCacheModel.createdBy = getCreatedBy();

		String createdBy = courseCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			courseCacheModel.createdBy = null;
		}

		Date modifiedOn = getModifiedOn();

		if (modifiedOn != null) {
			courseCacheModel.modifiedOn = modifiedOn.getTime();
		}
		else {
			courseCacheModel.modifiedOn = Long.MIN_VALUE;
		}

		courseCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = courseCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			courseCacheModel.modifiedBy = null;
		}

		return courseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{cno=");
		sb.append(getCno());
		sb.append(", ccode=");
		sb.append(getCcode());
		sb.append(", cname=");
		sb.append(getCname());
		sb.append(", cfee=");
		sb.append(getCfee());
		sb.append(", cdescription=");
		sb.append(getCdescription());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedOn=");
		sb.append(getModifiedOn());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.rvrjc.portal.model.Course");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cno</column-name><column-value><![CDATA[");
		sb.append(getCno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccode</column-name><column-value><![CDATA[");
		sb.append(getCcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cname</column-name><column-value><![CDATA[");
		sb.append(getCname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cfee</column-name><column-value><![CDATA[");
		sb.append(getCfee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cdescription</column-name><column-value><![CDATA[");
		sb.append(getCdescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedOn</column-name><column-value><![CDATA[");
		sb.append(getModifiedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Course.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Course.class };
	private long _cno;
	private String _ccode;
	private String _cname;
	private String _originalCname;
	private int _cfee;
	private int _originalCfee;
	private boolean _setOriginalCfee;
	private String _cdescription;
	private Date _createdOn;
	private String _createdBy;
	private Date _modifiedOn;
	private String _modifiedBy;
	private long _columnBitmask;
	private Course _escapedModel;
}