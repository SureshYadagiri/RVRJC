/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rvrjc.portal.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rvrjc.portal.model.Teacher;
import com.rvrjc.portal.model.TeacherModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Teacher service. Represents a row in the &quot;rvrjc_Teacher&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rvrjc.portal.model.TeacherModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeacherImpl}.
 * </p>
 *
 * @author suresh
 * @see TeacherImpl
 * @see com.rvrjc.portal.model.Teacher
 * @see com.rvrjc.portal.model.TeacherModel
 * @generated
 */
public class TeacherModelImpl extends BaseModelImpl<Teacher>
	implements TeacherModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a teacher model instance should use the {@link com.rvrjc.portal.model.Teacher} interface instead.
	 */
	public static final String TABLE_NAME = "rvrjc_Teacher";
	public static final Object[][] TABLE_COLUMNS = {
			{ "tid", Types.BIGINT },
			{ "firstName", Types.VARCHAR },
			{ "middleName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "gender", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "phno", Types.BIGINT },
			{ "liferayUserId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table rvrjc_Teacher (tid LONG not null primary key,firstName VARCHAR(75) null,middleName VARCHAR(75) null,lastName VARCHAR(75) null,gender VARCHAR(75) null,email VARCHAR(75) null,phno LONG,liferayUserId LONG)";
	public static final String TABLE_SQL_DROP = "drop table rvrjc_Teacher";
	public static final String ORDER_BY_JPQL = " ORDER BY teacher.tid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rvrjc_Teacher.tid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rvrjc.portal.model.Teacher"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rvrjc.portal.model.Teacher"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rvrjc.portal.model.Teacher"));

	public TeacherModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Teacher.class;
	}

	@Override
	public String getModelClassName() {
		return Teacher.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("tid", getTid());
		attributes.put("firstName", getFirstName());
		attributes.put("middleName", getMiddleName());
		attributes.put("lastName", getLastName());
		attributes.put("gender", getGender());
		attributes.put("email", getEmail());
		attributes.put("phno", getPhno());
		attributes.put("liferayUserId", getLiferayUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long tid = (Long)attributes.get("tid");

		if (tid != null) {
			setTid(tid);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String middleName = (String)attributes.get("middleName");

		if (middleName != null) {
			setMiddleName(middleName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Long phno = (Long)attributes.get("phno");

		if (phno != null) {
			setPhno(phno);
		}

		Long liferayUserId = (Long)attributes.get("liferayUserId");

		if (liferayUserId != null) {
			setLiferayUserId(liferayUserId);
		}
	}

	@Override
	public long getTid() {
		return _tid;
	}

	@Override
	public void setTid(long tid) {
		_tid = tid;
	}

	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@Override
	public String getMiddleName() {
		if (_middleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _middleName;
		}
	}

	@Override
	public void setMiddleName(String middleName) {
		_middleName = middleName;
	}

	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@Override
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public long getPhno() {
		return _phno;
	}

	@Override
	public void setPhno(long phno) {
		_phno = phno;
	}

	@Override
	public long getLiferayUserId() {
		return _liferayUserId;
	}

	@Override
	public void setLiferayUserId(long liferayUserId) {
		_liferayUserId = liferayUserId;
	}

	@Override
	public String getLiferayUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getLiferayUserId(), "uuid",
			_liferayUserUuid);
	}

	@Override
	public void setLiferayUserUuid(String liferayUserUuid) {
		_liferayUserUuid = liferayUserUuid;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Teacher.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Teacher toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Teacher)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TeacherImpl teacherImpl = new TeacherImpl();

		teacherImpl.setTid(getTid());
		teacherImpl.setFirstName(getFirstName());
		teacherImpl.setMiddleName(getMiddleName());
		teacherImpl.setLastName(getLastName());
		teacherImpl.setGender(getGender());
		teacherImpl.setEmail(getEmail());
		teacherImpl.setPhno(getPhno());
		teacherImpl.setLiferayUserId(getLiferayUserId());

		teacherImpl.resetOriginalValues();

		return teacherImpl;
	}

	@Override
	public int compareTo(Teacher teacher) {
		int value = 0;

		if (getTid() < teacher.getTid()) {
			value = -1;
		}
		else if (getTid() > teacher.getTid()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Teacher)) {
			return false;
		}

		Teacher teacher = (Teacher)obj;

		long primaryKey = teacher.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Teacher> toCacheModel() {
		TeacherCacheModel teacherCacheModel = new TeacherCacheModel();

		teacherCacheModel.tid = getTid();

		teacherCacheModel.firstName = getFirstName();

		String firstName = teacherCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			teacherCacheModel.firstName = null;
		}

		teacherCacheModel.middleName = getMiddleName();

		String middleName = teacherCacheModel.middleName;

		if ((middleName != null) && (middleName.length() == 0)) {
			teacherCacheModel.middleName = null;
		}

		teacherCacheModel.lastName = getLastName();

		String lastName = teacherCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			teacherCacheModel.lastName = null;
		}

		teacherCacheModel.gender = getGender();

		String gender = teacherCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			teacherCacheModel.gender = null;
		}

		teacherCacheModel.email = getEmail();

		String email = teacherCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			teacherCacheModel.email = null;
		}

		teacherCacheModel.phno = getPhno();

		teacherCacheModel.liferayUserId = getLiferayUserId();

		return teacherCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{tid=");
		sb.append(getTid());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", middleName=");
		sb.append(getMiddleName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", phno=");
		sb.append(getPhno());
		sb.append(", liferayUserId=");
		sb.append(getLiferayUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.rvrjc.portal.model.Teacher");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>tid</column-name><column-value><![CDATA[");
		sb.append(getTid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>middleName</column-name><column-value><![CDATA[");
		sb.append(getMiddleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phno</column-name><column-value><![CDATA[");
		sb.append(getPhno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>liferayUserId</column-name><column-value><![CDATA[");
		sb.append(getLiferayUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Teacher.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Teacher.class
		};
	private long _tid;
	private String _firstName;
	private String _middleName;
	private String _lastName;
	private String _gender;
	private String _email;
	private long _phno;
	private long _liferayUserId;
	private String _liferayUserUuid;
	private Teacher _escapedModel;
}