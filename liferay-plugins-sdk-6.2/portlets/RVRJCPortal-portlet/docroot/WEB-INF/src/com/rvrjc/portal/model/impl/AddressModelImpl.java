/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rvrjc.portal.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rvrjc.portal.model.Address;
import com.rvrjc.portal.model.AddressModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Address service. Represents a row in the &quot;rvrjc_Address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rvrjc.portal.model.AddressModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressImpl}.
 * </p>
 *
 * @author suresh
 * @see AddressImpl
 * @see com.rvrjc.portal.model.Address
 * @see com.rvrjc.portal.model.AddressModel
 * @generated
 */
public class AddressModelImpl extends BaseModelImpl<Address>
	implements AddressModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a address model instance should use the {@link com.rvrjc.portal.model.Address} interface instead.
	 */
	public static final String TABLE_NAME = "rvrjc_Address";
	public static final Object[][] TABLE_COLUMNS = {
			{ "addressId", Types.BIGINT },
			{ "doorNo", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "mandal", Types.VARCHAR },
			{ "district", Types.VARCHAR },
			{ "state_", Types.VARCHAR },
			{ "addCountry", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table rvrjc_Address (addressId LONG not null primary key,doorNo VARCHAR(75) null,city VARCHAR(75) null,mandal VARCHAR(75) null,district VARCHAR(75) null,state_ VARCHAR(75) null,addCountry VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table rvrjc_Address";
	public static final String ORDER_BY_JPQL = " ORDER BY address.addressId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rvrjc_Address.addressId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rvrjc.portal.model.Address"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rvrjc.portal.model.Address"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rvrjc.portal.model.Address"));

	public AddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Address.class;
	}

	@Override
	public String getModelClassName() {
		return Address.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("addressId", getAddressId());
		attributes.put("doorNo", getDoorNo());
		attributes.put("city", getCity());
		attributes.put("mandal", getMandal());
		attributes.put("district", getDistrict());
		attributes.put("state", getState());
		attributes.put("addCountry", getAddCountry());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long addressId = (Long)attributes.get("addressId");

		if (addressId != null) {
			setAddressId(addressId);
		}

		String doorNo = (String)attributes.get("doorNo");

		if (doorNo != null) {
			setDoorNo(doorNo);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String mandal = (String)attributes.get("mandal");

		if (mandal != null) {
			setMandal(mandal);
		}

		String district = (String)attributes.get("district");

		if (district != null) {
			setDistrict(district);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String addCountry = (String)attributes.get("addCountry");

		if (addCountry != null) {
			setAddCountry(addCountry);
		}
	}

	@Override
	public long getAddressId() {
		return _addressId;
	}

	@Override
	public void setAddressId(long addressId) {
		_addressId = addressId;
	}

	@Override
	public String getDoorNo() {
		if (_doorNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _doorNo;
		}
	}

	@Override
	public void setDoorNo(String doorNo) {
		_doorNo = doorNo;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public String getMandal() {
		if (_mandal == null) {
			return StringPool.BLANK;
		}
		else {
			return _mandal;
		}
	}

	@Override
	public void setMandal(String mandal) {
		_mandal = mandal;
	}

	@Override
	public String getDistrict() {
		if (_district == null) {
			return StringPool.BLANK;
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		_district = district;
	}

	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@Override
	public String getAddCountry() {
		if (_addCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _addCountry;
		}
	}

	@Override
	public void setAddCountry(String addCountry) {
		_addCountry = addCountry;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Address.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Address toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Address)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddressImpl addressImpl = new AddressImpl();

		addressImpl.setAddressId(getAddressId());
		addressImpl.setDoorNo(getDoorNo());
		addressImpl.setCity(getCity());
		addressImpl.setMandal(getMandal());
		addressImpl.setDistrict(getDistrict());
		addressImpl.setState(getState());
		addressImpl.setAddCountry(getAddCountry());

		addressImpl.resetOriginalValues();

		return addressImpl;
	}

	@Override
	public int compareTo(Address address) {
		int value = 0;

		if (getAddressId() < address.getAddressId()) {
			value = -1;
		}
		else if (getAddressId() > address.getAddressId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Address)) {
			return false;
		}

		Address address = (Address)obj;

		long primaryKey = address.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Address> toCacheModel() {
		AddressCacheModel addressCacheModel = new AddressCacheModel();

		addressCacheModel.addressId = getAddressId();

		addressCacheModel.doorNo = getDoorNo();

		String doorNo = addressCacheModel.doorNo;

		if ((doorNo != null) && (doorNo.length() == 0)) {
			addressCacheModel.doorNo = null;
		}

		addressCacheModel.city = getCity();

		String city = addressCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			addressCacheModel.city = null;
		}

		addressCacheModel.mandal = getMandal();

		String mandal = addressCacheModel.mandal;

		if ((mandal != null) && (mandal.length() == 0)) {
			addressCacheModel.mandal = null;
		}

		addressCacheModel.district = getDistrict();

		String district = addressCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			addressCacheModel.district = null;
		}

		addressCacheModel.state = getState();

		String state = addressCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			addressCacheModel.state = null;
		}

		addressCacheModel.addCountry = getAddCountry();

		String addCountry = addressCacheModel.addCountry;

		if ((addCountry != null) && (addCountry.length() == 0)) {
			addressCacheModel.addCountry = null;
		}

		return addressCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{addressId=");
		sb.append(getAddressId());
		sb.append(", doorNo=");
		sb.append(getDoorNo());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", mandal=");
		sb.append(getMandal());
		sb.append(", district=");
		sb.append(getDistrict());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", addCountry=");
		sb.append(getAddCountry());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.rvrjc.portal.model.Address");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>addressId</column-name><column-value><![CDATA[");
		sb.append(getAddressId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>doorNo</column-name><column-value><![CDATA[");
		sb.append(getDoorNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mandal</column-name><column-value><![CDATA[");
		sb.append(getMandal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>district</column-name><column-value><![CDATA[");
		sb.append(getDistrict());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addCountry</column-name><column-value><![CDATA[");
		sb.append(getAddCountry());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Address.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Address.class
		};
	private long _addressId;
	private String _doorNo;
	private String _city;
	private String _mandal;
	private String _district;
	private String _state;
	private String _addCountry;
	private Address _escapedModel;
}