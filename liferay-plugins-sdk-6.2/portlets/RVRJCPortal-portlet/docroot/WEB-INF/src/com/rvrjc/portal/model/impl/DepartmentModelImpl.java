/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rvrjc.portal.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rvrjc.portal.model.Department;
import com.rvrjc.portal.model.DepartmentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Department service. Represents a row in the &quot;rvrjc_Department&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rvrjc.portal.model.DepartmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DepartmentImpl}.
 * </p>
 *
 * @author suresh
 * @see DepartmentImpl
 * @see com.rvrjc.portal.model.Department
 * @see com.rvrjc.portal.model.DepartmentModel
 * @generated
 */
public class DepartmentModelImpl extends BaseModelImpl<Department>
	implements DepartmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a department model instance should use the {@link com.rvrjc.portal.model.Department} interface instead.
	 */
	public static final String TABLE_NAME = "rvrjc_Department";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dno", Types.BIGINT },
			{ "dname", Types.VARCHAR },
			{ "createdOn", Types.TIMESTAMP },
			{ "createdBy", Types.VARCHAR },
			{ "modifiedOn", Types.TIMESTAMP },
			{ "modifiedBy", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table rvrjc_Department (dno LONG not null primary key,dname VARCHAR(75) null,createdOn DATE null,createdBy VARCHAR(75) null,modifiedOn DATE null,modifiedBy VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table rvrjc_Department";
	public static final String ORDER_BY_JPQL = " ORDER BY department.dno ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rvrjc_Department.dno ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rvrjc.portal.model.Department"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rvrjc.portal.model.Department"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rvrjc.portal.model.Department"),
			true);
	public static long DNAME_COLUMN_BITMASK = 1L;
	public static long DNO_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rvrjc.portal.model.Department"));

	public DepartmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dno;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDno(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dno;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Department.class;
	}

	@Override
	public String getModelClassName() {
		return Department.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dno", getDno());
		attributes.put("dname", getDname());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedOn", getModifiedOn());
		attributes.put("modifiedBy", getModifiedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dno = (Long)attributes.get("dno");

		if (dno != null) {
			setDno(dno);
		}

		String dname = (String)attributes.get("dname");

		if (dname != null) {
			setDname(dname);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date modifiedOn = (Date)attributes.get("modifiedOn");

		if (modifiedOn != null) {
			setModifiedOn(modifiedOn);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@Override
	public long getDno() {
		return _dno;
	}

	@Override
	public void setDno(long dno) {
		_columnBitmask = -1L;

		_dno = dno;
	}

	@Override
	public String getDname() {
		if (_dname == null) {
			return StringPool.BLANK;
		}
		else {
			return _dname;
		}
	}

	@Override
	public void setDname(String dname) {
		_columnBitmask |= DNAME_COLUMN_BITMASK;

		if (_originalDname == null) {
			_originalDname = _dname;
		}

		_dname = dname;
	}

	public String getOriginalDname() {
		return GetterUtil.getString(_originalDname);
	}

	@Override
	public Date getCreatedOn() {
		return _createdOn;
	}

	@Override
	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getModifiedOn() {
		return _modifiedOn;
	}

	@Override
	public void setModifiedOn(Date modifiedOn) {
		_modifiedOn = modifiedOn;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Department.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Department toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Department)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DepartmentImpl departmentImpl = new DepartmentImpl();

		departmentImpl.setDno(getDno());
		departmentImpl.setDname(getDname());
		departmentImpl.setCreatedOn(getCreatedOn());
		departmentImpl.setCreatedBy(getCreatedBy());
		departmentImpl.setModifiedOn(getModifiedOn());
		departmentImpl.setModifiedBy(getModifiedBy());

		departmentImpl.resetOriginalValues();

		return departmentImpl;
	}

	@Override
	public int compareTo(Department department) {
		int value = 0;

		if (getDno() < department.getDno()) {
			value = -1;
		}
		else if (getDno() > department.getDno()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Department)) {
			return false;
		}

		Department department = (Department)obj;

		long primaryKey = department.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DepartmentModelImpl departmentModelImpl = this;

		departmentModelImpl._originalDname = departmentModelImpl._dname;

		departmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Department> toCacheModel() {
		DepartmentCacheModel departmentCacheModel = new DepartmentCacheModel();

		departmentCacheModel.dno = getDno();

		departmentCacheModel.dname = getDname();

		String dname = departmentCacheModel.dname;

		if ((dname != null) && (dname.length() == 0)) {
			departmentCacheModel.dname = null;
		}

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			departmentCacheModel.createdOn = createdOn.getTime();
		}
		else {
			departmentCacheModel.createdOn = Long.MIN_VALUE;
		}

		departmentCacheModel.createdBy = getCreatedBy();

		String createdBy = departmentCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			departmentCacheModel.createdBy = null;
		}

		Date modifiedOn = getModifiedOn();

		if (modifiedOn != null) {
			departmentCacheModel.modifiedOn = modifiedOn.getTime();
		}
		else {
			departmentCacheModel.modifiedOn = Long.MIN_VALUE;
		}

		departmentCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = departmentCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			departmentCacheModel.modifiedBy = null;
		}

		return departmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{dno=");
		sb.append(getDno());
		sb.append(", dname=");
		sb.append(getDname());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedOn=");
		sb.append(getModifiedOn());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.rvrjc.portal.model.Department");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dno</column-name><column-value><![CDATA[");
		sb.append(getDno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dname</column-name><column-value><![CDATA[");
		sb.append(getDname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedOn</column-name><column-value><![CDATA[");
		sb.append(getModifiedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Department.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Department.class
		};
	private long _dno;
	private String _dname;
	private String _originalDname;
	private Date _createdOn;
	private String _createdBy;
	private Date _modifiedOn;
	private String _modifiedBy;
	private long _columnBitmask;
	private Department _escapedModel;
}